@inject NavigationManager NavigationManager
@inject Interop Interop

@if (_isSupported)
{
    <div style='
        min-height: @AddSuffix(Height, "px");
        max-height: @AddSuffix(Height, "px");
        min-width: @AddSuffix(Width, "px");
        max-width: @AddSuffix(Width, "px");
        background-image: @GetRadialGradient(), @GetConicGradient();
        border-radius: 50%;
    '></div>
}
else
{
    if (_customContent)
    {
        @NotSupportedContent
    }
    else
    {
        <p>Your browser version is not supported.</p>
    }
}

@code {
    [Parameter]
    public int Height { get; set; }

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public int RadialWidth { get; set; }

    [Parameter]
    public List<DonutChartItem> Items { get; set; }

    [Parameter]
    public RenderFragment NotSupportedContent { get; set; }

    public bool _isSupported;

    private bool _customContent;

    protected override async Task OnParametersSetAsync()
    {
        if (NotSupportedContent != null)
        {
            _customContent = true;
        }
        _isSupported = await Interop.IsSupported("background: conic-gradient(#f06, gold)");
    }

    private string GetConicGradient()
    {
        string inner = string.Empty;

        if(Items != null)
            for (int index = 0; index < Items.Count; index++)
            {
                DonutChartItem item = Items[index];

                if (index != 0)
                    inner += ", ";

                inner += $"rgb({item.Fill.R}, {item.Fill.G}, {item.Fill.B}) {item.Percentage}%";
            }

        return $"conic-gradient({inner})";
    }

    private string GetRadialGradient()
        => $"radial-gradient(white {RadialWidth * 2}%, transparent {(RadialWidth * 2) + 1}%)";

    private string AddSuffix(object element, string suffix)
        => element.ToString() + suffix;
}
